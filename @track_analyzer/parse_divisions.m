%% Parse divisions from the groups structure generated by gui. 
function div = parse_divisions( obj, params )


 %Check if there are divisions. 
if isfield( obj.exp_info, 'groups') 
    div = obj.exp_info.groups;
else
    disp('No divisions found')
    div=[];
    return
end

%For this experiment, we should get all spot tracks and figure out
%which cell tracks they belong to. 
spot_track_assignment = cellfun(@(x) x(1,3), obj.spot_tracks);

%Loop over divisions, analyze tracks / frames. 
for d = 1:length(div)


    %% Defining the parent and daughters. 
    
    %Check for reference frame. Should be closest time to
    %metaphase. 
    if isempty( div(d).marked_frame )
        error('missing division frame marker!');
    end

    %Frame at which division reference is marked. 
    div_frame = div(d).marked_frame; 
    
    
    %Div tracks. 
    track_ids = div(d).cell_tracks;

    %Collect frames for all tracks associated with this division. 
    frames = cell(length(track_ids) ,1);
    for t = 1:length(track_ids)
        frames{t} = obj.tracks{ track_ids(t) }(:,1);
    end

    %First frame of each cell track. 
    first_frame = cellfun(@(x) x(1), frames );

    %Check if all tracks occur on/after marked frame (no detectable parent). 
    idx_before = find( first_frame < div_frame );
    
    if ~isempty(idx_before)
        
        %Must be a parent cell. Should be only one index.   
        [~,min_idx] = min( first_frame( idx_before ) );
        
        div(d).first_parent_frame = obj.tracks{ track_ids( idx_before(min_idx))}(1,1);
        parent_track_idx = track_ids(idx_before);

    else
        
        %No parent cell available. 
        parent_track_idx = [];        

    end
    
    
    
    %% Now we need to find all daughter tracks.
    
    %Loop over all tracks, find if any frames are after marked time point. 
    daughter_track_idx = [];
    for t = 1:length( track_ids )
        
        %All frames of this track
        these_frames = obj.tracks{ track_ids(t) }(:,1);
        
        if any( these_frames > div_frame )
            
            %Mark this track as a daughter. 
            daughter_track_idx = [daughter_track_idx, track_ids(t)];
        end
    end
    
    %If one or two daughters, easy. if more, then throw error - deal with
    %later?
    if length(daughter_track_idx) < 3 
            
        %Good number of tracks. 
        daughter_tracks = obj.tracks( daughter_track_idx );
    else

        error('more than 2 daughters!');

    end

    %Define the MIN of the last observable frame of each daughter. 
    last_frame_obserable = min( cellfun(@(x) x(end,1), daughter_tracks ));
    div(d).daughter_last_frame_observable = last_frame_obserable;

    
    %Add parent / daughter ids. 
    div(d).parent_track_idx = parent_track_idx;
    div(d).daughter_track_idx = daughter_track_idx;
    

    %% Now that we have identified parent and daughter cell tracks, 
    %let's get the nascent transcription tracks associated with these cell tracks. 
    
    %Parent loop
    parent_spot_track_idx=[];
    for p = 1:length( parent_track_idx )
        idx = find( spot_track_assignment == parent_track_idx(p) );
        parent_spot_track_idx= [parent_spot_track_idx;idx];
    end
    %Daughter loop
    daughter_spot_track_idx=[];
    for this_daughter = 1:length( daughter_track_idx )
        idx = find( spot_track_assignment == daughter_track_idx(this_daughter) );
        daughter_spot_track_idx= [daughter_spot_track_idx;idx];
    end

    %Figure out if there are spots before and after. 
    spots_before = ~isempty(parent_spot_track_idx);
    spots_after  = ~isempty(daughter_spot_track_idx);

    %% Get intentity traces, filter by params.min_intensity, find last parent pulse and first daughter pulse. 
    
    %PARENT
    if spots_before
        %Get intensities of each spots. 
        parent_int_tracks = obj.getSpotTrackIntTraces( parent_spot_track_idx, params.min_intensity );
        
        %Check if any spots are valid after filtering. 
        if isempty(parent_int_tracks)
            spots_before=0;
            div(d).parent_last_pulse = [];
            div(d).parent_int_tracks = [];
        else
            
            %Remove points that occurred after mark frame. 
            for t = 1:length(parent_int_tracks)
                
               this_track=parent_int_tracks{t};
               sel = this_track(:,1) <= div_frame;
               parent_int_tracks{t} = this_track(sel,:);
            end
            
            %Add info to div structure. 
            div(d).parent_int_tracks = parent_int_tracks;
            
            %Find last transcription pulse. 
            parent_last_pulse =-1;
            for p = 1:length(parent_int_tracks)
                frames = parent_int_tracks{p}(:,1);
                sel = frames <= div_frame;
                frames = frames(sel);
                if isempty(frames)
                    continue
                elseif frames(end) > parent_last_pulse 
                    parent_last_pulse = frames(end);
                end
            end
            if parent_last_pulse == -1
                parent_last_pulse = [];
            end
            
            %Add to structure. 
            div(d).parent_last_pulse = parent_last_pulse;
        end
    else
        div(d).parent_int_tracks = [];
        div(d).parent_last_pulse = [];
    end
    
    % DAUGHTER.
    if spots_after
        %Get intensities of each spots. 
        daughter_int_tracks = obj.getSpotTrackIntTraces( daughter_spot_track_idx, params.min_intensity );
        %Check if any spots are valid after filtering, otherwise reset time stamps wrt to division time. 
        if isempty(daughter_int_tracks)
            spots_after=0;
            div(d).daughter_first_pulse = [];
        else
            
            
            %Remove points that occurred after mark frame. 
            for t = 1:length(daughter_int_tracks)
                
               this_track=daughter_int_tracks{t};
               sel = this_track(:,1) > div_frame;
               daughter_int_tracks{t} = this_track(sel,:);
            end
            
            
            %Add info to div structure. 
            div(d).daughter_int_tracks = daughter_int_tracks;
            
            %Find the first transcription pulse. 
            daughter_first_pulse = Inf;
            for p = 1:length(daughter_int_tracks)
                frames = daughter_int_tracks{p}(:,1);
                sel = frames >= div_frame;
                frames = frames(sel);
                if isempty(frames)
                    continue
                elseif frames(1) < daughter_first_pulse 
                    daughter_first_pulse = frames(1);
                end
            end
            if isinf(daughter_first_pulse)
                daughter_first_pulse = [];
            end  

                
            %Add to structure. 
            div(d).daughter_first_pulse = daughter_first_pulse;
            
        end
    else
        
        div(d).daughter_first_pulse = [];
        div(d).daughter_int_tracks  = [];
    end


    %% Make a division track. 
    %Extract marked time. 
    mark = div(d).marked_frame;

    %Get all frames for parent/daughter. 
    parent_frames = cellfun(@(x) x(:,1), obj.tracks( div(d).parent_track_idx ),'uniformoutput',0);
    daughter_frames = cellfun(@(x) x(:,1), obj.tracks( div(d).daughter_track_idx ),'uniformoutput',0);

    %Time vector wrt to cytokinesis. 
    frames = unique([cat(1,parent_frames{:});cat(1,daughter_frames{:})]) - mark;

    %State vector for transcription spot. 
    on_times =[];
    if ~isempty(div(d).parent_int_tracks)
        parent_on_times = cellfun(@(x) x(:,1), div(d).parent_int_tracks,'UniformOutput',0);
        on_times = cat(1,parent_on_times{:});
    end
    
    if ~isempty(div(d).daughter_int_tracks)
        daughter_on_times = cellfun(@(x) x(:,1), div(d).daughter_int_tracks,'UniformOutput',0);
        on_times = [on_times;cat(1,daughter_on_times{:})];
    end

    %Shift wrt to cytokinesis. 
    on_times = on_times -mark;
    %Idx on. 
    [~,idx] = intersect(frames,on_times);
    state = zeros(size(frames));
    state(idx) = 1;

    %Make d_track. 
    div(d).d_track = [frames,state];
    
    
end


end